
'use server';
/**
 * @fileOverview An AI flow for generating SEO-friendly articles and their hero images.
 *
 * - generateArticle - A function that handles the article and image generation process.
 * - GenerateArticleInput - The input type for the generateArticle function.
 * - GenerateArticleOutput - The return type for the generateArticle function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'zod';

const GenerateArticleInputSchema = z.object({
  topic: z.string().describe('The topic of the article to generate.'),
  category: z.string().describe('The category of the article (e.g., Engine, Sensors).')
});
export type GenerateArticleInput = z.infer<typeof GenerateArticleInputSchema>;

const GenerateArticleOutputSchema = z.object({
  summary: z
    .string()
    .describe('A short, SEO-friendly summary of the article (around 160 characters).'),
  content: z
    .string()
    .describe(
      'The full, detailed, SEO-friendly article content, in Markdown format. It should be at least 1500 words and well-structured with H1, H2, H3, H4, H5, and H6 headings.'
    ),
  imageUrl: z.string().url().describe("A URL for a hero image for the article, generated by an AI model. The image should be visually appealing and directly related to the article's topic.")
});
export type GenerateArticleOutput = z.infer<typeof GenerateArticleOutputSchema>;


const articlePrompt = ai.definePrompt({
  name: 'articleGeneratorPrompt',
  input: {schema: z.object({ topic: z.string() })},
  output: {schema: z.object({
      summary: GenerateArticleOutputSchema.shape.summary,
      content: GenerateArticleOutputSchema.shape.content
  })},
  prompt: `You are an expert automotive writer and SEO specialist. Your task is to write a detailed, comprehensive, and engaging article on the topic: '{{{topic}}}'.

The article MUST be at least 1500 words long.

Your response MUST be in well-structured Markdown format. The structure is absolutely critical for SEO and readability.
- The article's main title MUST be an H1 heading (e.g., '# Title of the Article'). The H1 heading should be the very first thing in the content.
- You MUST include multiple H2 (##) headings to structure the main sections of the article.
- Within each H2 section, you MUST use several H3 (###), H4 (####), H5 (#####), and H6 (######) headings to break down the content into detailed sub-sections.
- The use of this deep, hierarchical heading structure (H1 -> H2 -> H3 -> H4 etc.) is MANDATORY and must be followed strictly.
- Start the article with a compelling introduction (immediately following the H1 heading) and conclude with a useful summary paragraph.

In addition to the article, you must provide a concise, SEO-friendly summary for the article (approximately 160 characters).
`,
});


export const generateArticleFlow = ai.defineFlow(
  {
    name: 'generateArticleFlow',
    inputSchema: GenerateArticleInputSchema,
    outputSchema: GenerateArticleOutputSchema,
  },
  async (input) => {
    const imagePrompt = `A photorealistic, high-resolution hero image for a technical automotive blog post about "${input.topic}". The image should be clean, modern, professional, and visually interesting with cinematic lighting. Focus on a single strong visual element related to the topic. Avoid text or clutter.`;

    // Generate the article text and the image in parallel to save time.
    const [articleResponse, imageResponse] = await Promise.all([
        articlePrompt({ topic: input.topic }),
        ai.generate({
            model: 'googleai/gemini-2.0-flash-preview-image-generation',
            prompt: imagePrompt,
            config: {
                responseModalities: ['TEXT', 'IMAGE'],
            },
        }).catch(err => {
            console.warn('Gemini image generation failed:', err);
            return null; // Return null on error to handle fallback
        })
    ]);

    const articleOutput = articleResponse.output;
    
    if (!articleOutput) {
      throw new Error('Failed to generate article content.');
    }

    let imageUrl;
    if (imageResponse?.media?.url) {
        imageUrl = imageResponse.media.url;
    } else {
        console.warn('Gemini image generation failed, falling back to Pollinations AI.');
        const fallbackPrompt = `A photorealistic, high-resolution hero image for a technical automotive blog post about "${input.topic}". The image should be clean, modern, professional, and visually interesting with cinematic lighting.`;
        imageUrl = `https://image.pollinations.ai/prompt/${encodeURIComponent(fallbackPrompt)}?width=600&height=400&nologo=true`;
    }

    return {
        ...articleOutput,
        imageUrl: imageUrl,
    };
  }
);


export async function generateArticle(
  input: GenerateArticleInput
): Promise<GenerateArticleOutput> {
  return await generateArticleFlow(input);
}
