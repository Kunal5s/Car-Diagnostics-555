
'use server';
/**
 * @fileOverview An AI flow for generating high-quality, helpful articles based on strict guidelines.
 *
 * - generateArticle - A function that handles the article and image generation process.
 * - GenerateArticleInput - The input type for the generateArticle function.
 * - GenerateArticleOutput - The return type for the generateArticle function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'zod';

const GenerateArticleInputSchema = z.object({
  topic: z.string().describe('The topic of the article to generate.'),
  category: z.string().describe('The category of the article (e.g., Engine, Sensors).')
});
export type GenerateArticleInput = z.infer<typeof GenerateArticleInputSchema>;

const GenerateArticleOutputSchema = z.object({
  title: z
    .string()
    .describe('The title of the article. It must be exactly 9 words long.'),
  summary: z
    .string()
    .describe('A detailed and helpful summary of the article, approximately 100 words long. It should capture the main points and entice the user to read more.'),
  content: z
    .string()
    .describe(
      'The full, detailed, and helpful article content, in Markdown format. It must be at least 1500 words. CRITICAL: The article MUST conclude with a section titled "## 6 Key Takeaways" containing a bulleted list of exactly six important points from the article. This is a mandatory and non-negotiable final section.'
    ),
  imageUrl: z.string().url().describe("A URL for a hero image for the article, generated by an AI model. The image should be visually appealing and directly related to the article's topic.")
});
export type GenerateArticleOutput = z.infer<typeof GenerateArticleOutputSchema>;


const articlePrompt = ai.definePrompt({
  name: 'articleGeneratorPrompt',
  model: 'googleai/gemini-1.5-flash',
  input: {schema: z.object({ topic: z.string() })},
  output: {schema: z.object({
      title: GenerateArticleOutputSchema.shape.title,
      summary: GenerateArticleOutputSchema.shape.summary,
      content: GenerateArticleOutputSchema.shape.content
  })},
  prompt: `
**YOUR MOST IMPORTANT, NON-NEGOTIABLE TASK: Every article you write MUST end with a specific section: "## 6 Key Takeaways". This section MUST contain a bulleted list of exactly six important, actionable points from the article. This is the final and most critical requirement.**

You are an expert automotive writer with a "human-first, help-first" philosophy. Your goal is to create genuinely useful and original content that solves real user problems, without any AI fluff, keyword stuffing, or robotic patterns.

You must generate an article on the topic: '{{{topic}}}'.

The article MUST adhere to the following strict standards:
1.  **Title:** The title MUST be exactly 9 words long. It should be clear, user-friendly, and focused on the topic.
2.  **Summary:** The summary MUST be detailed and helpful, approximately 100 words long.
3.  **Word Count:** The body of the article MUST be at least 1500 words long.
4.  **Tone:** The writing style must be natural, empathetic, and engaging, as if written by a seasoned, helpful human expert.
5.  **Structure & Formatting:** The response MUST be in well-structured Markdown format.
    - The content MUST NOT start with an H1 heading (e.g., "# Title"). The title is handled by a separate 'title' field. Begin directly with the introduction.
    - Use subheadings (H2, H3, etc.) to organize the information clearly.

**FINAL REMINDER: The article is incomplete and incorrect if it does not end with the "## 6 Key Takeaways" section. This is mandatory.**
`,
});


export const generateArticleFlow = ai.defineFlow(
  {
    name: 'generateArticleFlow',
    inputSchema: GenerateArticleInputSchema,
    outputSchema: GenerateArticleOutputSchema,
  },
  async (input) => {
    const imagePrompt = `A photorealistic, high-resolution hero image for a technical automotive blog post with global appeal about "${input.topic}". The image should be clean, professional, and not specific to any single country. Use cinematic lighting and a strong, universally recognizable visual element. Avoid text or clutter.`;

    // Generate the article text and the image in parallel to save time.
    const [articleResponse, imageResponse] = await Promise.all([
        articlePrompt({ topic: input.topic }),
        ai.generate({
            model: 'googleai/gemini-2.0-flash-preview-image-generation',
            prompt: imagePrompt,
            config: {
                responseModalities: ['TEXT', 'IMAGE'],
            },
        }).catch(err => {
            console.warn('Gemini image generation failed:', err);
            return null; // Return null on error to handle fallback
        })
    ]);

    const articleOutput = articleResponse.output;
    
    if (!articleOutput) {
      throw new Error('Failed to generate article content.');
    }

    let imageUrl;
    if (imageResponse?.media?.url) {
        imageUrl = imageResponse.media.url;
    } else {
        console.warn('Gemini image generation failed, falling back to Pollinations AI.');
        const fallbackPrompt = `A photorealistic, high-resolution hero image for a technical automotive blog post with global appeal about "${input.topic}".`;
        imageUrl = `https://image.pollinations.ai/prompt/${encodeURIComponent(fallbackPrompt)}?width=600&height=400&nologo=true`;
    }

    return {
        title: articleOutput.title,
        summary: articleOutput.summary,
        content: articleOutput.content,
        imageUrl: imageUrl,
    };
  }
);


export async function generateArticle(
  input: GenerateArticleInput
): Promise<GenerateArticleOutput> {
  const result = await generateArticleFlow(input);
  
  // The model might ignore the prompt and put the H1 title inside the content.
  // This is a safeguard to ensure it's not duplicated.
  let processedContent = result.content.trim();
  const titleAsH1WithSpace = `# ${result.title}`;
  const titleAsH1NoSpace = `#${result.title}`;
  
  // Check for the title as an H1, with or without a space, case-insensitively.
  if (processedContent.toLowerCase().startsWith(titleAsH1WithSpace.toLowerCase())) {
      processedContent = processedContent.substring(titleAsH1WithSpace.length).trim();
  } else if (processedContent.toLowerCase().startsWith(titleAsH1NoSpace.toLowerCase())) {
      processedContent = processedContent.substring(titleAsH1NoSpace.length).trim();
  } else if (processedContent.toLowerCase().startsWith(result.title.toLowerCase())) {
      // Also check for the title without any markdown heading
      processedContent = processedContent.substring(result.title.length).trim();
  }

  return {
    ...result,
    content: processedContent,
  };
}
